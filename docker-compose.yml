version: '3.8'
services:
  db: 
    image: postgres:15
    container_name: db_app
    ports:
      - "1221:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

  # create_table:
  #   build: 
  #     context: /CreateTable/
  #   environment:
  #     DB_USER: ${DB_USER}
  #     DB_PASS: ${DB_PASS}
  #     DB_HOST: ${DB_HOST}
  #     DB_PORT: ${DB_PORT}
  #     DB_NAME: ${DB_NAME}
  #   depends_on:
  #     - db
  #   command: ["python", "main.py"]

  CMC_data_service:
    build: 
      context: /CMC_data_service/
    # environment:
    #   DB_USER: ${DB_USER}
    #   DB_PASS: ${DB_PASS}
    #   DB_HOST: ${DB_HOST}
    #   DB_PORT: ${DB_PORT}
    #   DB_NAME: ${DB_NAME}
    #   SECRET_KEY: ${SECRET_KEY}
    #   ALGORITHM: ${ALGORITHM}
    ports:
      - "8000:80"
    depends_on:
      - db


  # auth_service:
  #   build: 
  #     context: /AuthService/
  #   environment:
  #     DB_USER: ${DB_USER}
  #     DB_PASS: ${DB_PASS}
  #     DB_HOST: ${DB_HOST}
  #     DB_PORT: ${DB_PORT}
  #     DB_NAME: ${DB_NAME}
  #     SECRET_KEY: ${SECRET_KEY}
  #     ALGORITHM: ${ALGORITHM}
  #   ports:
  #     - "8000:80"
  #   depends_on:
  #     - db

  # network_storage_management:
  #   build: 
  #     context: /NetworkStorageManagement/
  #   environment:
  #     DB_USER: ${DB_USER}
  #     DB_PASS: ${DB_PASS}
  #     DB_HOST: ${DB_HOST}
  #     DB_PORT: ${DB_PORT}
  #     DB_NAME: ${DB_NAME}
  #     URL_AUTH: ${URL_AUTH}
  #   ports:
  #     - "8001:80"
  #   depends_on:
  #     - db
  #     - auth_service

  # web_folder:
  #   build: 
  #     context: /WebFolder/
  #   environment:
  #     DB_USER: ${DB_USER}
  #     DB_PASS: ${DB_PASS}
  #     DB_HOST: ${DB_HOST}
  #     DB_PORT: ${DB_PORT}
  #     DB_NAME: ${DB_NAME}
  #     URL_AUTH: ${URL_AUTH}
  #   ports:
  #     - "8002:80"
  #   depends_on:
  #     - db
  #     - auth_service
  #     - network_storage_management

  # y_disck:
  #   build: 
  #     context: /YDisck/
  #   environment:
  #     DB_USER: ${DB_USER}
  #     DB_PASS: ${DB_PASS}
  #     DB_HOST: ${DB_HOST}
  #     DB_PORT: ${DB_PORT}
  #     DB_NAME: ${DB_NAME}
  #     URL_AUTH: ${URL_AUTH}
  #   ports:
  #     - "8003:80"
  #   depends_on:
  #     - db
  #     - auth_service
  #     - network_storage_management

  # weather_data_service:
  #   build: 
  #     context: /WeatherDataService/
  #   environment:
  #     DB_USER: ${DB_USER}
  #     DB_PASS: ${DB_PASS}
  #     DB_HOST: ${DB_HOST}
  #     DB_PORT: ${DB_PORT}
  #     DB_NAME: ${DB_NAME}
  #   ports:
  #     - "9998:8080"
  #   depends_on:
  #     - db
  #     - weather_r_w

  # web:
  #   build:
  #     context: /WeatherData/
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:80" # Прокидываем порт 3000 на хосте к порту 80 в контейнере
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   depends_on:
  #     - db
  #     - weather_r_w
  #     - weather_data_service

volumes:
  postgres_data:
